//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `ContentMovieCollectionViewCell`.
    static let contentMovieCollectionViewCell = _R.nib._ContentMovieCollectionViewCell()
    /// Nib `MovieCollectionViewCell`.
    static let movieCollectionViewCell = _R.nib._MovieCollectionViewCell()
    /// Nib `MovieViewController`.
    static let movieViewController = _R.nib._MovieViewController()
    
    /// `UINib(name: "ContentMovieCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.contentMovieCollectionViewCell) instead")
    static func contentMovieCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.contentMovieCollectionViewCell)
    }
    
    /// `UINib(name: "MovieCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieCollectionViewCell) instead")
    static func movieCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieCollectionViewCell)
    }
    
    /// `UINib(name: "MovieViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.movieViewController) instead")
    static func movieViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.movieViewController)
    }
    
    static func contentMovieCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContentMovieCollectionViewCell? {
      return R.nib.contentMovieCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContentMovieCollectionViewCell
    }
    
    static func movieCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieCollectionViewCell? {
      return R.nib.movieCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieCollectionViewCell
    }
    
    static func movieViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.movieViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ContentMovieCollectionViewCell`.
    static let contentMovieCollectionViewCell: Rswift.ReuseIdentifier<ContentMovieCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "ContentMovieCollectionViewCell")
    /// Reuse identifier `MovieCollectionViewCell`.
    static let movieCollectionViewCell: Rswift.ReuseIdentifier<MovieCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "MovieCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ContentMovieCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ContentMovieCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ContentMovieCollectionViewCell"
      let name = "ContentMovieCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ContentMovieCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContentMovieCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MovieCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MovieCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MovieCollectionViewCell"
      let name = "MovieCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MovieCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MovieCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MovieViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MovieViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
