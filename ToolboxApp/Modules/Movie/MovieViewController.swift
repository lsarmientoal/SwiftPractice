//
//  MovieViewController.swift
//  ToolboxApp
//
//  Created by Laura Sarmiento Almanza on 10/13/19.
//  Copyright (c) 2019 Laura Sarmiento Almanza. All rights reserved.
//
//  This file was generated by the üêç VIPER generator
//

import UIKit
import RxSwift
import RxCocoa

final class MovieViewController: UIViewController {
    
    @IBOutlet weak var collectionView: UICollectionView! {
        didSet {
            collectionView.register(R.nib.contentMovieCollectionViewCell)
        }
    }
    private let movies = BehaviorRelay<[Movie]>(value: [])
    
    // MARK: - Public properties -

    var presenter: MoviePresenterInterface!

    // MARK: - Lifecycle -

    override func viewDidLoad() {
        super.viewDidLoad()
        title = "Toolbox Movies"
        collectionView.rx.setDelegate(self)
            .disposed(by: disposeBag)
        presenter.loadMovies()
    }
}

// MARK: - Extensions -

extension MovieViewController: MovieViewInterface {
    func drawMoviesData(source: Observable<[Movie]>) {
        source.bind(to: movies)
            .disposed(by: disposeBag)
            
        movies.asObservable().bind(to: collectionView.rx.items(
            cellIdentifier: R.reuseIdentifier.contentMovieCollectionViewCell.identifier,
            cellType: ContentMovieCollectionViewCell.self)) { [unowned self] (raw: Int, movie: Movie, cell: ContentMovieCollectionViewCell) in
                cell.setUpCell(movie: movie)
                cell.rx.selectedItem
                    .subscribe(onNext: self.presenter.selectMovieItem)
                    .disposed(by: cell.disposeBag)
            }
            .disposed(by: disposeBag)
    }
}

extension MovieViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        collectionView.bounds.size.with {
            $0.height = movies.value[indexPath.row].type == .thumb ? 180.0 : 220.0
        }
    }
}

